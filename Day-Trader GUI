(() => {
console.clear();

// --- CSS ---
const style = document.createElement('style');
style.innerHTML = `
:root{--bg:#0b0f1a;--panel:#0f1224;--accent:#38bdf8;--muted:#94a3b8;--success:#10b981;--danger:#ef4444;--text:#e6eef8;}
.dt-win{position:fixed;left:40px;top:40px;width:1000px;height:730px;display:flex;flex-direction:column;border-radius:12px;overflow:hidden;box-shadow:0 10px 40px rgba(0,0,0,.8);background:var(--panel);border:1px solid rgba(255,255,255,0.05);color:var(--text);font-family:Inter,sans-serif;z-index:9999;resize:both;overflow:auto}
.dt-title{cursor:move;padding:10px 14px;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(0,0,0,0.08));display:flex;align-items:center;gap:8px;user-select:none;}
.dt-dot{width:12px;height:12px;border-radius:50%;display:inline-block;cursor:pointer}
.dt-dot.red{background:#ff5f56}
.dt-dot.yellow{background:#ffbd2e}
.dt-dot.green{background:#27c93f}
.dt-title h1{font-size:14px;margin:0;font-weight:600;color:var(--text)}
.dt-subtitle{font-size:12px;color:var(--muted);margin-left:8px}
.dt-content{display:flex;flex:1;gap:12px;padding:12px;overflow:auto}
.dt-left{width:65%;display:flex;flex-direction:column;gap:12px}
.dt-right{width:35%;display:flex;flex-direction:column;gap:12px}
.dt-card{background:linear-gradient(180deg, rgba(255,255,255,0.01), rgba(0,0,0,0.12));padding:10px;border-radius:10px;border:1px solid rgba(255,255,255,0.03);box-shadow:inset 0 1px 0 rgba(255,255,255,0.02)}
canvas.dt-chart{width:100%;height:180px;background:linear-gradient(180deg,#01051a 0%, #02112a 100%);border-radius:8px}
.dt-controls{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
.dt-controls input[type=number], select, input[type=text]{padding:6px;border-radius:6px;border:1px solid rgba(255,255,255,0.08);background:#0b1220;color:var(--text)}
.dt-button{padding:6px 10px;border-radius:6px;border:0;background:linear-gradient(180deg,var(--accent),#0ea5c9);color:#022233;font-weight:700;cursor:pointer}
.dt-button.danger{background:linear-gradient(180deg,var(--danger),#d61c1c);color:white}
.graph-label{font-size:12px;color:var(--muted);margin-bottom:4px;text-align:center;}
#dtCurrentPrice{font-size:14px;color:#38bdf8;margin-left:10px;}
`;
document.head.appendChild(style);

// --- Window HTML ---
const win=document.createElement('div');
win.className='dt-win';
win.innerHTML=`
<div class="dt-title" id="dtDragHandle">
  <span class="dt-dot red" id="dtClose"></span>
  <span class="dt-dot yellow" id="dtHide"></span>
  <span class="dt-dot green" id="dtFullscreen"></span>
  <h1>Mini Day-Trader</h1><div class="dt-subtitle">Drag this bar</div>
  <div style="margin-left:auto">
    <span class="dt-subtitle" id="dtSpeedLabel">Speed: 1x</span>
  </div>
</div>
<div class="dt-content">
  <div class="dt-left">
    <div class="dt-card dt-controls">
      <input type="text" id="dtSearch" placeholder="Search stock...">
      <select id="dtFilter">
        <option value="all">All Stocks</option>
        <option value="owned">Owned</option>
        <option value="unowned">Unowned</option>
        <option value="up">Going Up</option>
        <option value="down">Going Down</option>
      </select>
      <select id="dtTickerSelect"></select>
      <button class="dt-button" id="dtGraphTypeBtn">Switch to Candlestick</button>
      <span id="dtCurrentPrice">Price: $100.00</span>
    </div>
    <div class="dt-card"><canvas class="dt-chart" id="dtPriceChart" height="180"></canvas></div>
    <div class="dt-card dt-controls">
      <input type="number" id="dtQty" value="10" min="1">
      <button class="dt-button" id="dtBuy">Buy</button>
      <button class="dt-button danger" id="dtSell">Sell</button>
      <button class="dt-button" id="dtBuyAll">Buy All</button>
      <button class="dt-button danger" id="dtSellAll">Sell All</button>
      Speed: <input type="number" id="dtSpeed" value="1" min="0.1" step="0.1" style="width:60px">
    </div>
  </div>
  <div class="dt-right">
    <div class="dt-card">
      <div>Cash: $<span id="dtCash">10000.00</span></div>
      <div>Position: <span id="dtPos">0</span></div>
      <div>Avg Price: <span id="dtAvg">-</span></div>
      <div>P/L: <span id="dtPL">0</span></div>
    </div>
    <div class="dt-card">
      <div class="graph-label">Profit / Loss</div>
      <canvas class="dt-chart" id="dtPLChart" height="100"></canvas>
    </div>
    <div class="dt-card">
      <div class="graph-label">Cash</div>
      <canvas class="dt-chart" id="dtCashChart" height="100"></canvas>
    </div>
    <div class="dt-card">
      <div class="graph-label">Position Size</div>
      <canvas class="dt-chart" id="dtPosChart" height="100"></canvas>
    </div>
  </div>
</div>
`;
document.body.appendChild(win);

// --- Dragging ---
let drag=false,offX=0,offY=0;
document.getElementById('dtDragHandle').onpointerdown=e=>{drag=true;offX=e.clientX-win.offsetLeft;offY=e.clientY-win.offsetTop;}
window.onpointermove=e=>{if(drag){win.style.left=e.clientX-offX+'px';win.style.top=e.clientY-offY+'px';}}
window.onpointerup=()=>drag=false;

// --- Window controls ---
document.getElementById('dtClose').onclick=()=>win.remove();
let hidden=false;
document.getElementById('dtHide').onclick=()=>{
 hidden=!hidden;
 win.querySelector('.dt-content').style.display=hidden?'none':'flex';
};
let fs=false,save={};
document.getElementById('dtFullscreen').onclick=()=>{
 fs=!fs;
 if(fs){save={left:win.style.left,top:win.style.top,width:win.style.width,height:win.style.height};Object.assign(win.style,{left:'0',top:'0',width:'100vw',height:'100vh'});}
 else Object.assign(win.style,save);
};

// --- Companies ---
const companies = {
  TSLA:"Tesla Inc.", AAPL:"Apple Inc.", NVDA:"NVIDIA Corp.", AMZN:"Amazon.com Inc.", GME:"GameStop Corp.",
  MSFT:"Microsoft Corp.", META:"Meta Platforms Inc.", NFLX:"Netflix Inc.", DIS:"Walt Disney Co.", BABA:"Alibaba Group",
  JPM:"JPMorgan Chase & Co.", BAC:"Bank of America", XOM:"Exxon Mobil Corp.", CVX:"Chevron Corp.", WMT:"Walmart Inc.",
  KO:"Coca-Cola Co.", PFE:"Pfizer Inc.", MRK:"Merck & Co.", NVAX:"Novavax Inc.", UBER:"Uber Technologies",
  LYFT:"Lyft Inc.", SHOP:"Shopify Inc.", SQ:"Block Inc.", INTC:"Intel Corp.", AMD:"Advanced Micro Devices",
  SPY:"S&P 500 ETF", QQQ:"Nasdaq 100 ETF", TSN:"Tyson Foods", BA:"Boeing Co.", NIO:"NIO Inc.",
  RBLX:"Roblox Corp.", ZM:"Zoom Video Communications"
};

// --- Portfolio & History ---
let portfolio={},cash=10000,speed=1;
for(let t in companies) portfolio[t]={price:100,pos:0,avg:0,history:[100],candles:[],momentum:0};
let history={profit:[0],cash:[cash],pos:[0]};

// --- Elements ---
const qty=document.getElementById('dtQty'),cashEl=document.getElementById('dtCash'),
posEl=document.getElementById('dtPos'),avgEl=document.getElementById('dtAvg'),
plEl=document.getElementById('dtPL'),priceCanvas=document.getElementById('dtPriceChart'),
plCanvas=document.getElementById('dtPLChart'),cashCanvas=document.getElementById('dtCashChart'),
posCanvas=document.getElementById('dtPosChart'),currentPriceEl=document.getElementById('dtCurrentPrice');

let useCandlestick=false;

// --- Graph switch ---
document.getElementById('dtGraphTypeBtn').onclick=()=>{
  useCandlestick=!useCandlestick;
  document.getElementById('dtGraphTypeBtn').innerText=useCandlestick?"Switch to Line Graph":"Switch to Candlestick";
  update();
};

// --- Ticker filtering & search ---
const tickerSelect=document.getElementById('dtTickerSelect'),
      searchInput=document.getElementById('dtSearch'),
      filterSelect=document.getElementById('dtFilter');

function updateTickerList(){
  const currentTicker = tickerSelect.value || Object.keys(companies)[0];
  const query = searchInput.value.toLowerCase();
  const filter = filterSelect.value;
  tickerSelect.innerHTML='';

  for(let t in companies){
    const d = portfolio[t];
    const name = companies[t];
    const change = d.history.length>1 ? d.history[d.history.length-1]-d.history[d.history.length-2] : 0;

    if(filter==='owned' && d.pos===0) continue;
    if(filter==='unowned' && d.pos>0) continue;
    if(filter==='up' && change<=0) continue;
    if(filter==='down' && change>=0) continue;
    if(!t.toLowerCase().includes(query) && !name.toLowerCase().includes(query)) continue;

    const option = document.createElement('option');
    option.value = t;
    option.innerText = `${t} — ${name} | $${d.price.toFixed(2)} | Pos:${d.pos} | Δ:${change.toFixed(2)}`;
    option.style.color = change>0?'var(--success)':change<0?'var(--danger)':'var(--muted)';
    tickerSelect.appendChild(option);
  }

  // Preserve selection even if filtered out
  if(!Array.from(tickerSelect.options).some(o=>o.value===currentTicker)){
    const d = portfolio[currentTicker];
    const opt = document.createElement('option');
    opt.value = currentTicker;
    opt.innerText = `${currentTicker} — ${companies[currentTicker]} | $${d.price.toFixed(2)} | Pos:${d.pos}`;
    opt.style.color = '#888';
    tickerSelect.appendChild(opt);
  }
  tickerSelect.value = currentTicker;
}

searchInput.oninput = updateTickerList;
filterSelect.onchange = updateTickerList;

// --- Helper ---
function ticker(){return tickerSelect.value||Object.keys(companies)[0];}

// --- Update ---
function update(){
  const t=ticker(),d=portfolio[t];
  const pl=d.pos?(d.price-d.avg)*d.pos:0;
  cashEl.textContent=cash.toFixed(2);
  posEl.textContent=d.pos;
  avgEl.textContent=d.pos?d.avg.toFixed(2):'-';
  plEl.textContent=pl.toFixed(2);
  plEl.style.color=pl>0?'var(--success)':pl<0?'var(--danger)':'var(--text)';
  currentPriceEl.textContent=`Price: $${d.price.toFixed(2)}`;
  drawPrice(d);
  drawGraph(plCanvas, history.profit,'#10b981');
  drawGraph(cashCanvas, history.cash,'#38bdf8');
  drawGraph(posCanvas, history.pos,'#facc15');
}

// --- Draw Graphs ---
function drawGraph(canvas,data,color){
  if(data.length<2) return;
  const ctx=canvas.getContext('2d');
  canvas.width=canvas.clientWidth*devicePixelRatio;
  canvas.height=canvas.clientHeight*devicePixelRatio;
  ctx.save(); ctx.scale(devicePixelRatio,devicePixelRatio);
  ctx.clearRect(0,0,canvas.clientWidth,canvas.clientHeight);
  const w=canvas.clientWidth,h=canvas.clientHeight;
  const max=Math.max(...data);
  const min=Math.min(...data);
  if(max===min){ ctx.beginPath(); ctx.strokeStyle=color; ctx.lineWidth=2; ctx.moveTo(0,h/2); ctx.lineTo(w,h/2); ctx.stroke(); ctx.restore(); return; }
  ctx.beginPath(); ctx.strokeStyle=color; ctx.lineWidth=2;
  data.forEach((v,i)=>{const x=i*(w/(data.length-1)), y=h-(v-min)/(max-min)*h; i===0?ctx.moveTo(x,y):ctx.lineTo(x,y);});
  ctx.stroke(); ctx.restore();
}

function drawPrice(d){
  const ctx=priceCanvas.getContext('2d');
  priceCanvas.width=priceCanvas.clientWidth*devicePixelRatio;
  priceCanvas.height=priceCanvas.clientHeight*devicePixelRatio;
  ctx.save(); ctx.scale(devicePixelRatio,devicePixelRatio);
  ctx.clearRect(0,0,priceCanvas.clientWidth,priceCanvas.clientHeight);
  const w=priceCanvas.clientWidth,h=priceCanvas.clientHeight;
  if(useCandlestick){
    const candles=d.candles.slice(-50);
    if(!candles.length) return;
    let min=Math.min(...candles.map(c=>c.low),d.pos?d.avg:Infinity);
    let max=Math.max(...candles.map(c=>c.high),d.pos?d.avg:-Infinity);
    const candleWidth=w/candles.length*0.7;
    candles.forEach((c,i)=>{
      const x=i*(w/candles.length)+candleWidth/2;
      const yOpen=h-(c.open-min)/(max-min)*h;
      const yClose=h-(c.close-min)/(max-min)*h;
      const yHigh=h-(c.high-min)/(max-min)*h;
      const yLow=h-(c.low-min)/(max-min)*h;
      ctx.strokeStyle=c.close>=c.open?'#10b981':'#ef4444';
      ctx.fillStyle=c.close>=c.open?'#10b981':'#ef4444';
      ctx.beginPath(); ctx.moveTo(x,yHigh); ctx.lineTo(x,yLow); ctx.stroke();
      ctx.fillRect(x-candleWidth/2, Math.min(yOpen,yClose), candleWidth, Math.max(Math.abs(yClose-yOpen),1));
    });
    if(d.pos>0){
      const y=h-(d.avg-min)/(max-min)*h;
      ctx.beginPath(); ctx.strokeStyle='#38bdf8'; ctx.lineWidth=2; ctx.setLineDash([5,5]);
      ctx.moveTo(0,y); ctx.lineTo(w,y); ctx.stroke(); ctx.setLineDash([]);
    }
  } else {
    const data=d.history.slice(-100);
    if(!data.length) return;
    const max=Math.max(...data,d.pos?d.avg:0);
    const min=Math.min(...data,d.pos?d.avg:Infinity);
    if(max===min){ ctx.beginPath(); ctx.strokeStyle='#38bdf8'; ctx.lineWidth=2; ctx.moveTo(0,h/2); ctx.lineTo(w,h/2); ctx.stroke(); ctx.restore(); return; }
    ctx.beginPath(); ctx.strokeStyle='#38bdf8'; ctx.lineWidth=2;
    data.forEach((p,i)=>{const x=i*(w/(data.length-1)),y=h-(p-min)/(max-min)*h; i===0?ctx.moveTo(x,y):ctx.lineTo(x,y);});
    ctx.stroke();
    if(d.pos>0){
      const y=h-(d.avg-min)/(max-min)*h;
      ctx.beginPath(); ctx.strokeStyle='#10b981'; ctx.lineWidth=2; ctx.setLineDash([5,5]);
      ctx.moveTo(0,y); ctx.lineTo(w,y); ctx.stroke(); ctx.setLineDash([]);
    }
  }
}

// --- Trading ---
document.getElementById('dtBuy').onclick=()=>{
  const t=ticker(),d=portfolio[t],q=+qty.value||1,c=q*d.price;
  if(c>cash) return alert("Not enough cash");
  d.avg=d.pos?((d.avg*d.pos)+(d.price*q))/(d.pos+q):d.price;
  d.pos+=q; cash-=c;
  update();
};
document.getElementById('dtSell').onclick=()=>{
  const t=ticker(),d=portfolio[t],q=+qty.value||1;
  if(q>d.pos) return alert("Not enough position");
  d.pos-=q; cash+=d.price*q; if(!d.pos)d.avg=0;
  update();
};

// --- BUY ALL / SELL ALL ---
document.getElementById('dtBuyAll').onclick = () => {
  const t = ticker(), d = portfolio[t];
  const maxQty = Math.floor(cash / d.price);
  if (maxQty <= 0) return alert("Not enough cash to buy anything.");
  d.avg = d.pos ? ((d.avg * d.pos) + (d.price * maxQty)) / (d.pos + maxQty) : d.price;
  d.pos += maxQty;
  cash -= d.price * maxQty;
  update();
};

document.getElementById('dtSellAll').onclick = () => {
  const t = ticker(), d = portfolio[t];
  if (d.pos <= 0) return alert("No position to sell.");
  cash += d.price * d.pos;
  d.pos = 0;
  d.avg = 0;
  update();
};

// --- Speed ---
document.getElementById('dtSpeed').onchange=()=>{speed=parseFloat(document.getElementById('dtSpeed').value)||1; document.getElementById('dtSpeedLabel').textContent=`Speed: ${speed}x`;};

// --- Market movement ---
function step(){
  for(let t in portfolio){
    const d=portfolio[t];
    d.momentum=d.momentum*0.95+(Math.random()-0.5)*0.03;
    const open=d.price;
    d.price*=1+d.momentum;
    d.price=Math.max(d.price,1);
    const close=d.price;
    const high=Math.max(open,close)*(1+Math.random()*0.01);
    const low=Math.min(open,close)*(1-Math.random()*0.01);
    d.candles.push({open,high,low,close});
    d.history.push(close);
    if(d.candles.length>50) d.candles.shift();
    if(d.history.length>500) d.history.shift();
  }
  const t=ticker(),d=portfolio[t];
  const pl=d.pos?(d.price-d.avg)*d.pos:0;
  history.profit.push(pl); history.cash.push(cash); history.pos.push(d.pos);
  if(history.profit.length>500){history.profit.shift(); history.cash.shift(); history.pos.shift();}

  updateTickerList();
  update();
}

// --- Loop ---
let lastTime=0;
function loop(ts){if(ts-lastTime>500/speed){step(); lastTime=ts;} requestAnimationFrame(loop);}
requestAnimationFrame(loop);

// --- Initial setup ---
updateTickerList();
update();
})();



